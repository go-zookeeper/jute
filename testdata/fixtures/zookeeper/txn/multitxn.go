// Autogenerated jute compiler
// @generated from '/home/pmazzini/repos/jute/testdata/zookeeper.jute'

package txn // github.com/go-zookeeper/zk/internal/txn

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type MultiTxn struct {
	Txns []*Txn // txns
}

func (r *MultiTxn) GetTxns() []*Txn {
	if r != nil && r.Txns != nil {
		return r.Txns
	}
	return nil
}

func (r *MultiTxn) Read(dec jute.Decoder) (err error) {
	var size int
	if err = dec.ReadStart(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	if size < 0 {
		r.Txns = nil
	} else {
		r.Txns = make([]*Txn, size)
		for i := 0; i < size; i++ {
			if err = dec.ReadRecord(r.Txns[i]); err != nil {
				return err
			}
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *MultiTxn) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.Txns), r.Txns == nil); err != nil {
		return err
	}
	for _, v := range r.Txns {
		if err := enc.WriteRecord(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *MultiTxn) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiTxn(%+v)", *r)
}
