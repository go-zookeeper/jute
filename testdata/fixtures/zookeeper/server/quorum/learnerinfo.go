// Autogenerated jute compiler
// @generated from '/home/pmazzini/repos/jute/testdata/zookeeper.jute'

package quorum // github.com/go-zookeeper/zk/internal/server/quorum

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type LearnerInfo struct {
	Serverid        int64 // serverid
	ProtocolVersion int32 // protocolVersion
	ConfigVersion   int64 // configVersion
}

func (r *LearnerInfo) GetServerid() int64 {
	if r != nil {
		return r.Serverid
	}
	return 0
}

func (r *LearnerInfo) GetProtocolVersion() int32 {
	if r != nil {
		return r.ProtocolVersion
	}
	return 0
}

func (r *LearnerInfo) GetConfigVersion() int64 {
	if r != nil {
		return r.ConfigVersion
	}
	return 0
}

func (r *LearnerInfo) Read(dec jute.Decoder) (err error) {
	if err = dec.ReadStart(); err != nil {
		return err
	}
	r.Serverid, err = dec.ReadLong()
	if err != nil {
		return err
	}
	r.ProtocolVersion, err = dec.ReadInt()
	if err != nil {
		return err
	}
	r.ConfigVersion, err = dec.ReadLong()
	if err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *LearnerInfo) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteLong(r.Serverid); err != nil {
		return err
	}
	if err := enc.WriteInt(r.ProtocolVersion); err != nil {
		return err
	}
	if err := enc.WriteLong(r.ConfigVersion); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *LearnerInfo) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LearnerInfo(%+v)", *r)
}
