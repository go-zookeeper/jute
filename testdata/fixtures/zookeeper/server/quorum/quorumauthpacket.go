// Autogenerated jute compiler
// @generated from '/home/pmazzini/repos/jute/testdata/zookeeper.jute'

package quorum // github.com/go-zookeeper/zk/internal/server/quorum

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type QuorumAuthPacket struct {
	Magic  int64  // magic
	Status int32  // status
	Token  []byte // token
}

func (r *QuorumAuthPacket) GetMagic() int64 {
	if r != nil {
		return r.Magic
	}
	return 0
}

func (r *QuorumAuthPacket) GetStatus() int32 {
	if r != nil {
		return r.Status
	}
	return 0
}

func (r *QuorumAuthPacket) GetToken() []byte {
	if r != nil && r.Token != nil {
		return r.Token
	}
	return nil
}

func (r *QuorumAuthPacket) Read(dec jute.Decoder) (err error) {
	if err = dec.ReadStart(); err != nil {
		return err
	}
	r.Magic, err = dec.ReadLong()
	if err != nil {
		return err
	}
	r.Status, err = dec.ReadInt()
	if err != nil {
		return err
	}
	r.Token, err = dec.ReadBuffer()
	if err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *QuorumAuthPacket) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteLong(r.Magic); err != nil {
		return err
	}
	if err := enc.WriteInt(r.Status); err != nil {
		return err
	}
	if err := enc.WriteBuffer(r.Token); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *QuorumAuthPacket) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuorumAuthPacket(%+v)", *r)
}
