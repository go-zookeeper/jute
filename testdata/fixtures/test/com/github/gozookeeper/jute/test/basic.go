// Autogenerated jute compiler
// @generated from 'testdata/test.jute'

package test // com/github/gozookeeper/jute/test

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type Basic struct {
	B   bool    // b
	P   byte    // p
	I   int32   // i
	L   int64   // l
	F   float32 // f
	D   float64 // d
	S   *string // s
	Buf []byte  // buf
}

func (r *Basic) GetB() bool {
	if r != nil {
		return r.B
	}
	return false
}

func (r *Basic) GetP() byte {
	if r != nil {
		return r.P
	}
	return 0
}

func (r *Basic) GetI() int32 {
	if r != nil {
		return r.I
	}
	return 0
}

func (r *Basic) GetL() int64 {
	if r != nil {
		return r.L
	}
	return 0
}

func (r *Basic) GetF() float32 {
	if r != nil {
		return r.F
	}
	return 0
}

func (r *Basic) GetD() float64 {
	if r != nil {
		return r.D
	}
	return 0
}

func (r *Basic) GetS() string {
	if r != nil && r.S != nil {
		return *r.S
	}
	return ""
}

func (r *Basic) GetBuf() []byte {
	if r != nil && r.Buf != nil {
		return r.Buf
	}
	return nil
}

func (r *Basic) Read(dec jute.Decoder) (err error) {
	if err = dec.ReadStart(); err != nil {
		return err
	}
	r.B, err = dec.ReadBoolean()
	if err != nil {
		return err
	}
	r.P, err = dec.ReadByte()
	if err != nil {
		return err
	}
	r.I, err = dec.ReadInt()
	if err != nil {
		return err
	}
	r.L, err = dec.ReadLong()
	if err != nil {
		return err
	}
	r.F, err = dec.ReadFloat()
	if err != nil {
		return err
	}
	r.D, err = dec.ReadDouble()
	if err != nil {
		return err
	}
	r.S, err = dec.ReadString()
	if err != nil {
		return err
	}
	r.Buf, err = dec.ReadBuffer()
	if err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *Basic) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteBoolean(r.B); err != nil {
		return err
	}
	if err := enc.WriteByte(r.P); err != nil {
		return err
	}
	if err := enc.WriteInt(r.I); err != nil {
		return err
	}
	if err := enc.WriteLong(r.L); err != nil {
		return err
	}
	if err := enc.WriteFloat(r.F); err != nil {
		return err
	}
	if err := enc.WriteDouble(r.D); err != nil {
		return err
	}
	if err := enc.WriteString(r.S); err != nil {
		return err
	}
	if err := enc.WriteBuffer(r.Buf); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *Basic) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Basic(%+v)", *r)
}
