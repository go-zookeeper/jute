// Autogenerated jute compiler
// @generated from 'testdata/test.jute'

package test // com/github/gozookeeper/jute/test

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type NestedContainer struct {
	M1 map[int32]map[string]int32 // m1
	M2 map[string][]float64       // m2
	V1 [][][]int32                // v1
	V2 []map[int32]Basic          // v2
}

func (r *NestedContainer) GetM1() map[int32]map[string]int32 {
	if r != nil && r.M1 != nil {
		return r.M1
	}
	return nil
}

func (r *NestedContainer) GetM2() map[string][]float64 {
	if r != nil && r.M2 != nil {
		return r.M2
	}
	return nil
}

func (r *NestedContainer) GetV1() [][][]int32 {
	if r != nil && r.V1 != nil {
		return r.V1
	}
	return nil
}

func (r *NestedContainer) GetV2() []map[int32]Basic {
	if r != nil && r.V2 != nil {
		return r.V2
	}
	return nil
}

func (r *NestedContainer) Read(dec jute.Decoder) (err error) {
	var size int
	if err = dec.ReadStart(); err != nil {
		return err
	}
	size, err = dec.ReadMapStart()
	if err != nil {
		return err
	}
	r.M1 = make(map[int32]map[string]int32)
	var k0 int32
	var v0 map[string]int32
	for i := 0; i < size; i++ {
		k0, err = dec.ReadInt()
		if err != nil {
			return err
		}
		size, err = dec.ReadMapStart()
		if err != nil {
			return err
		}
		v0 = make(map[string]int32)
		var k1 string
		var v1 int32
		for i := 0; i < size; i++ {
			k1, err = dec.ReadString()
			if err != nil {
				return err
			}
			v1, err = dec.ReadInt()
			if err != nil {
				return err
			}
			v0[k1] = v1
		}
		if err = dec.ReadMapEnd(); err != nil {
			return err
		}
		r.M1[k0] = v0
	}
	if err = dec.ReadMapEnd(); err != nil {
		return err
	}
	size, err = dec.ReadMapStart()
	if err != nil {
		return err
	}
	r.M2 = make(map[string][]float64)
	var k1 string
	var v1 []float64
	for i := 0; i < size; i++ {
		k1, err = dec.ReadString()
		if err != nil {
			return err
		}
		size, err = dec.ReadVectorStart()
		if err != nil {
			return err
		}
		if size < 0 {
			v1 = nil
		} else {
			v1 = make([]float64, size)
			for i := 0; i < size; i++ {
				v1[i], err = dec.ReadDouble()
				if err != nil {
					return err
				}
			}
		}
		if err = dec.ReadVectorEnd(); err != nil {
			return err
		}
		r.M2[k1] = v1
	}
	if err = dec.ReadMapEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	if size < 0 {
		r.V1 = nil
	} else {
		r.V1 = make([][][]int32, size)
		for i := 0; i < size; i++ {
			size, err = dec.ReadVectorStart()
			if err != nil {
				return err
			}
			if size < 0 {
				r.V1[i] = nil
			} else {
				r.V1[i] = make([][]int32, size)
				for i := 0; i < size; i++ {
					size, err = dec.ReadVectorStart()
					if err != nil {
						return err
					}
					if size < 0 {
						r.V1[i][i] = nil
					} else {
						r.V1[i][i] = make([]int32, size)
						for i := 0; i < size; i++ {
							r.V1[i][i][i], err = dec.ReadInt()
							if err != nil {
								return err
							}
						}
					}
					if err = dec.ReadVectorEnd(); err != nil {
						return err
					}
				}
			}
			if err = dec.ReadVectorEnd(); err != nil {
				return err
			}
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	if size < 0 {
		r.V2 = nil
	} else {
		r.V2 = make([]map[int32]Basic, size)
		for i := 0; i < size; i++ {
			size, err = dec.ReadMapStart()
			if err != nil {
				return err
			}
			r.V2[i] = make(map[int32]Basic)
			var k4 int32
			var v4 Basic
			for i := 0; i < size; i++ {
				k4, err = dec.ReadInt()
				if err != nil {
					return err
				}
				if err = dec.ReadRecord(&v4); err != nil {
					return err
				}
				r.V2[i][k4] = v4
			}
			if err = dec.ReadMapEnd(); err != nil {
				return err
			}
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *NestedContainer) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteMapStart(len(r.M1)); err != nil {
		return err
	}
	for k, v := range r.M1 {
		if err := enc.WriteInt(k); err != nil {
			return err
		}
		if err := enc.WriteMapStart(len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := enc.WriteString(k); err != nil {
				return err
			}
			if err := enc.WriteInt(v); err != nil {
				return err
			}
		}
		if err := enc.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := enc.WriteMapEnd(); err != nil {
		return err
	}
	if err := enc.WriteMapStart(len(r.M2)); err != nil {
		return err
	}
	for k, v := range r.M2 {
		if err := enc.WriteString(k); err != nil {
			return err
		}
		if err := enc.WriteVectorStart(len(v), v == nil); err != nil {
			return err
		}
		for _, v := range v {
			if err := enc.WriteDouble(v); err != nil {
				return err
			}
		}
		if err := enc.WriteVectorEnd(); err != nil {
			return err
		}
	}
	if err := enc.WriteMapEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.V1), r.V1 == nil); err != nil {
		return err
	}
	for _, v := range r.V1 {
		if err := enc.WriteVectorStart(len(v), v == nil); err != nil {
			return err
		}
		for _, v := range v {
			if err := enc.WriteVectorStart(len(v), v == nil); err != nil {
				return err
			}
			for _, v := range v {
				if err := enc.WriteInt(v); err != nil {
					return err
				}
			}
			if err := enc.WriteVectorEnd(); err != nil {
				return err
			}
		}
		if err := enc.WriteVectorEnd(); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.V2), r.V2 == nil); err != nil {
		return err
	}
	for _, v := range r.V2 {
		if err := enc.WriteMapStart(len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := enc.WriteInt(k); err != nil {
				return err
			}
			if err := enc.WriteRecord(&v); err != nil {
				return err
			}
		}
		if err := enc.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *NestedContainer) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NestedContainer(%+v)", *r)
}
